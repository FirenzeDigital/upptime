name: Delete Closed Issues (Manual)

on:
  workflow_dispatch:
    inputs:
      confirm_deletion:
        description: 'Confirm to delete all closed issues'
        required: true
        default: 'false'

jobs:
  delete_closed_issues:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Delete closed issues
        if: ${{ github.event.inputs.confirm_deletion == 'true' }}
        run: |
          # Use dedicated secret for issue deletion with write access
          GITHUB_TOKEN=${{ secrets.GH_TOKEN_DELETE_ISSUE }}
          REPO_OWNER=${{ github.repository_owner }}
          REPO_NAME=${{ github.event.repository.name }}

          # Construct GraphQL query
          QUERY=$(cat <<EOF
          query {
            repository(owner: "$REPO_OWNER", name: "$REPO_NAME") {
              issues(states: CLOSED) {
                nodes {
                  id
                }
              }
            }
          }
          EOF
          )

          # Execute GraphQL query using personal access token
          GRAPHQL_URL="https://api.github.com/graphql"
          RESPONSE=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$QUERY" "$GRAPHQL_URL")

          # Check for successful response (exit code 0)
          if [[ $? -ne 0 ]]; then
            echo "Error fetching closed issues. Skipping deletion."
            exit 1
          fi

          # Check if any closed issues were found in the response
          ISSUE_IDS=$(echo "$RESPONSE" | jq -r '.data.repository.issues.nodes[].id')
          if [[ -z "$ISSUE_IDS" ]]; then
            echo "No closed issues found."
            exit 0
          fi

          # Delete each closed issue with error handling
          for ISSUE_ID in $ISSUE_IDS; do
            DELETE_MUTATION=$(cat <<EOF
            mutation {
              deleteIssue(input: {issueId: "$ISSUE_ID"}) {
                clientMutationId
              }
            }
            EOF
            )

            DELETE_RESPONSE=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$DELETE_MUTATION" "$GRAPHQL_URL")

            # Check for successful deletion response (exit code 0)
            if [[ $? -ne 0 ]]; then
              echo "Error deleting issue with ID: $ISSUE_ID. Skipping..."
            fi
          done
